{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactListChangedEvent = new Subject();\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = [];\n    this.http.get('http://localhost:3000/contacts').subscribe(response => {\n      this.contacts = response.contacts;\n      this.maxContactId = this.getMaxId();\n      this.sortAndSend();\n    }, error => {\n      console.log(error);\n    });\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    return this.h;\n  }\n  deleteContact(contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.http.delete('http://localhost:3000/contacts/' + contact.id).subscribe(response => {\n      this.contacts.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId.toString();\n  }\n  addContact(newContact) {\n    if (!newContact) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/contacts', newContact, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.contacts.push(responseData.contact);\n      this.sortAndSend();\n    });\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(response => {\n      this.contacts[pos] = newContact;\n      this.sortAndSend();\n    });\n  }\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/contacts', contacts, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  sortAndSend() {\n    this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","ContactService","constructor","http","get","subscribe","response","contacts","maxContactId","getMaxId","sortAndSend","error","console","log","getContacts","slice","getContact","id","h","deleteContact","contact","pos","indexOf","delete","splice","maxId","currentId","parseInt","toString","addContact","newContact","headers","post","responseData","push","updateContact","originalContact","put","storeContacts","JSON","stringify","contactListChangedEvent","next","sort","a","b","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  maxContactId: string;\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http\n      .get<{ contacts: Contact[] }>('http://localhost:3000/contacts')\n      .subscribe(\n        (response) => {\n          this.contacts = response.contacts;\n          this.maxContactId = this.getMaxId();\n          this.sortAndSend();\n        },\n        (error: any) => {\n          console.log(error);\n        }\n      );\n  }\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n  getContact(id: string): Contact {\n    return this.h\n  }\n  deleteContact(contact: Contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.http\n      .delete('http://localhost:3000/contacts/' + contact.id)\n      .subscribe((response: Response) => {\n        this.contacts.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n  getMaxId(): string {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId.toString();\n  }\n\n  addContact(newContact: Contact) {\n    if (!newContact) {\n      return;\n    }\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .post<{ message: string; contact: Contact }>(\n        'http://localhost:3000/contacts',\n        newContact,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new document to documents\n        this.contacts.push(responseData.contact);\n        this.sortAndSend();\n      });\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    // update database\n    this.http\n      .put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n        headers: headers,\n      })\n      .subscribe((response: Response) => {\n        this.contacts[pos] = newContact;\n        this.sortAndSend();\n      });\n  }\n\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .put('http://localhost:3000/contacts', contacts, { headers: headers })\n      .subscribe(() => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n  }\n  sortAndSend() {\n    this.contacts.sort((a, b) =>\n      a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n    );\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}