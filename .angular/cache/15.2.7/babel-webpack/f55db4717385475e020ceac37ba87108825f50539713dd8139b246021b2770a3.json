{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactListChangedEvent = new Subject();\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = [];\n    this.http.get('http://localhost:3000/contacts').subscribe(response => {\n      this.contacts = response.contacts;\n      this.maxContactId = this.getMaxId();\n      this.sortAndSend();\n    }, error => {\n      console.log(error);\n    });\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  getContactByGroup(id) {\n    deleteContact(contact, Contact);\n    {\n      if (contact === null) {\n        return;\n      }\n      const pos = this.contacts.indexOf(contact);\n      if (pos < 0) {\n        return;\n      }\n      this.http.delete('http://localhost:3000/contacts/' + contact.id).subscribe(response => {\n        this.contacts.splice(pos, 1);\n        this.sortAndSend();\n      });\n    }\n    getMaxId();\n    string;\n    {\n      let maxId = 0;\n      for (let contact of this.contacts) {\n        let currentId = parseInt(contact.id);\n        if (currentId > maxId) {\n          maxId = currentId;\n        }\n      }\n      return maxId.toString();\n    }\n    addContact(newContact, Contact);\n    {\n      if (!newContact) {\n        return;\n      }\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.http.post('http://localhost:3000/contacts', newContact, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.contacts.push(responseData.contact);\n        this.sortAndSend();\n      });\n    }\n    updateContact(originalContact, Contact, newContact, Contact);\n    {\n      if (!originalContact || !newContact) {\n        return;\n      }\n      const pos = this.contacts.indexOf(originalContact);\n      if (pos < 0) {\n        return;\n      }\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // update database\n      this.http.put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n        headers: headers\n      }).subscribe(response => {\n        this.contacts[pos] = newContact;\n        this.sortAndSend();\n      });\n    }\n    storeContacts();\n    {\n      let contacts = JSON.stringify(this.contacts);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.http.put('http://localhost:3000/contacts', contacts, {\n        headers: headers\n      }).subscribe(() => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n    sortAndSend();\n    {\n      this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n      this.contactListChangedEvent.next(this.contacts.slice());\n    }\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Contact","Subject","ContactService","constructor","http","get","subscribe","response","contacts","maxContactId","getMaxId","sortAndSend","error","console","log","getContacts","slice","getContact","id","contact","getContactByGroup","deleteContact","pos","indexOf","delete","splice","string","maxId","currentId","parseInt","toString","addContact","newContact","headers","post","responseData","push","updateContact","originalContact","put","storeContacts","JSON","stringify","contactListChangedEvent","next","sort","a","b","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  maxContactId: string;\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http\n      .get<{ contacts: Contact[] }>('http://localhost:3000/contacts')\n      .subscribe(\n        (response) => {\n          this.contacts = response.contacts;\n          this.maxContactId = this.getMaxId();\n          this.sortAndSend();\n        },\n        (error: any) => {\n          console.log(error);\n        }\n      );\n  }\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n  getContact(id: string): Contact {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n\n  getContactByGroup(id: string): Contact[] {\n    \n  deleteContact(contact: Contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.http\n      .delete('http://localhost:3000/contacts/' + contact.id)\n      .subscribe((response: Response) => {\n        this.contacts.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n  getMaxId(): string {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId.toString();\n  }\n\n  addContact(newContact: Contact) {\n    if (!newContact) {\n      return;\n    }\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .post<{ message: string; contact: Contact }>(\n        'http://localhost:3000/contacts',\n        newContact,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new document to documents\n        this.contacts.push(responseData.contact);\n        this.sortAndSend();\n      });\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    // update database\n    this.http\n      .put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n        headers: headers,\n      })\n      .subscribe((response: Response) => {\n        this.contacts[pos] = newContact;\n        this.sortAndSend();\n      });\n  }\n\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .put('http://localhost:3000/contacts', contacts, { headers: headers })\n      .subscribe(() => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n  }\n  sortAndSend() {\n    this.contacts.sort((a, b) =>\n      a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n    );\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}