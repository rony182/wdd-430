{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GameService {\n  constructor(http) {\n    this.http = http;\n    this.gameListChangedEvent = new Subject();\n    this.games = [];\n    this.gameSelectedEvent = new EventEmitter();\n    this.gameChangedEvent = new EventEmitter();\n    this.getGames();\n  }\n  getGames() {\n    this.http.get('http://localhost:3000/games').subscribe(responseData => {\n      this.games = responseData.games;\n      this.sortAndSend();\n    });\n  }\n  getGame(id) {\n    for (let game of this.games) {\n      if (game.id == id) {\n        return game;\n      }\n    }\n    return null;\n  }\n  deleteGame(game) {\n    if (!game) {\n      return;\n    }\n    const pos = this.games.findIndex(d => d.id === game.id);\n    if (pos < 0) {\n      return;\n    }\n    this.http.delete('http://localhost:3000/games/' + game.id).subscribe(response => {\n      this.games.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  addGame(newGame) {\n    if (!newGame) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/games', newGame, {\n      headers: headers\n    }).subscribe(responseData => {\n      this.games.push(responseData.game);\n      this.sortAndSend();\n    });\n  }\n  updateGame(originalGame, newGame) {\n    if (!originalGame || !newGame) {\n      return;\n    }\n    const pos = this.games.findIndex(d => d.id === originalGame.id);\n    if (pos < 0) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/games/' + originalGame.id, newGame, {\n      headers: headers\n    }).subscribe(response => {\n      this.games[pos] = newGame;\n      this.sortAndSend();\n      this.get;\n    });\n  }\n  sortAndSend() {\n    this.games.sort((a, b) => a.gameDate > b.gameDate ? 1 : -1);\n    this.gameListChangedEvent.next(this.games.slice());\n  }\n}\nGameService.ɵfac = function GameService_Factory(t) {\n  return new (t || GameService)(i0.ɵɵinject(i1.HttpClient));\n};\nGameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GameService,\n  factory: GameService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","HttpHeaders","GameService","constructor","http","getGames","get","subscribe","responseData","games","sortAndSend","getGame","id","game","deleteGame","pos","findIndex","d","delete","response","splice","addGame","newGame","headers","post","push","updateGame","originalGame","put","sort","a","b","gameDate","gameListChangedEvent","next","slice","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\wdd-430\\src\\app\\games\\game.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Game } from './game.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GameService {\r\n  gameListChangedEvent = new Subject<Game[]>();\r\n  games: Game[] = [];\r\n  maxGameId: number;\r\n  gameSelectedEvent = new EventEmitter<Game>();\r\n  gameChangedEvent = new EventEmitter<Game[]>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.getGames();\r\n  }\r\n\r\n  getGames() {\r\n    this.http\r\n      .get<{ message: string; games: Game[] }>('http://localhost:3000/games')\r\n      .subscribe((responseData) => {\r\n        this.games = responseData.games;\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  getGame(id: number): Game {\r\n    for (let game of this.games) {\r\n      if (game.id == id) {\r\n        return game;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  deleteGame(game: Game) {\r\n    if (!game) {\r\n      return;\r\n    }\r\n\r\n    const pos = this.games.findIndex((d) => d.id === game.id);\r\n    if (pos < 0) {\r\n      return;\r\n    }\r\n\r\n    this.http\r\n      .delete('http://localhost:3000/games/' + game.id)\r\n      .subscribe((response: Response) => {\r\n        this.games.splice(pos, 1);\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  addGame(newGame: Game) {\r\n    if (!newGame) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n    this.http\r\n      .post<{ message: string; game: Game }>(\r\n        'http://localhost:3000/games',\r\n        newGame,\r\n        { headers: headers }\r\n      )\r\n      .subscribe((responseData) => {\r\n        this.games.push(responseData.game);\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  updateGame(originalGame: Game, newGame: Game) {\r\n    if (!originalGame || !newGame) {\r\n      return;\r\n    }\r\n\r\n    const pos = this.games.findIndex((d) => d.id === originalGame.id);\r\n    if (pos < 0) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n    this.http\r\n      .put('http://localhost:3000/games/' + originalGame.id, newGame, {\r\n        headers: headers,\r\n      })\r\n      .subscribe((response: Response) => {\r\n        this.games[pos] = newGame;\r\n        this.sortAndSend();\r\n        this.get\r\n      });\r\n  }\r\n\r\n  sortAndSend() {\r\n    this.games.sort((a, b) => (a.gameDate > b.gameDate ? 1 : -1));\r\n    this.gameListChangedEvent.next(this.games.slice());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}