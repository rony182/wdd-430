{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contactListChangedEvent = new Subject();\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = [];\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  deleteContact(contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactChangedEvent.emit(this.contacts.slice());\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id.toString());\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AAExD,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,cAAc;EASzBC;IAPA,4BAAuB,GAAG,IAAIF,OAAO,EAAa;IAElD,yBAAoB,GAAG,IAAIF,YAAY,EAAW;IAClD,wBAAmB,GAAG,IAAIA,YAAY,EAAa;IAE3C,aAAQ,GAAc,EAAE;IAG9B,IAAI,CAACK,QAAQ,GAAGJ,YAAY;IAC5B,IAAI,CAACK,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;EACrC;EACAC,WAAW;IACT,OAAO,IAAI,CAACH,QAAQ,CAACI,KAAK,EAAE;EAC9B;EACAC,UAAU,CAACC,EAAU;IACnB,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACP,QAAQ,EAAE;MACjC,IAAIO,OAAO,CAACD,EAAE,KAAKA,EAAE,EAAE;QACrB,OAAOC,OAAO;;;IAGlB,OAAO,IAAI;EACb;EACAC,aAAa,CAACD,OAAgB;IAC5B,IAAIA,OAAO,KAAK,IAAI,EAAE;MACpB;;IAEF,MAAME,GAAG,GAAG,IAAI,CAACT,QAAQ,CAACU,OAAO,CAACH,OAAO,CAAC;IAC1C,IAAIE,GAAG,GAAG,CAAC,EAAE;MACX;;IAEF,IAAI,CAACT,QAAQ,CAACW,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC5B,IAAI,CAACG,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACb,QAAQ,CAACI,KAAK,EAAE,CAAC;EACtD;EACAF,QAAQ;IACN,IAAIY,KAAK,GAAG,CAAC;IACb,KAAK,IAAIP,OAAO,IAAI,IAAI,CAACP,QAAQ,EAAE;MACjC,IAAIe,SAAS,GAAGC,QAAQ,CAACT,OAAO,CAACD,EAAE,CAACW,QAAQ,EAAE,CAAC;MAC/C,IAAIF,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;;AA5CWhB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAoB,SAAdpB,cAAc;EAAAqB,YAFb;AAAM","names":["EventEmitter","MOCKCONTACTS","Subject","ContactService","constructor","contacts","maxContactId","getMaxId","getContacts","slice","getContact","id","contact","deleteContact","pos","indexOf","splice","contactChangedEvent","emit","maxId","currentId","parseInt","toString","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  maxContactId: number;\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  private contacts: Contact[] = [];\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n  getContact(id: number): Contact {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  deleteContact(contact: Contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactChangedEvent.emit(this.contacts.slice());\n  }\n  getMaxId(): number {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id.toString());\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}