{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TeamService {\n  constructor(http) {\n    this.http = http;\n    this.teams = [];\n    this.teamsListChangedEvent = new Subject();\n    this.teamSelectedEvent = new EventEmitter();\n    this.teamChangedEvent = new EventEmitter();\n    this.getTeams();\n  }\n  getTeams() {\n    this.http.get('http://localhost:3000/teams').subscribe(responseData => {\n      this.teams = responseData.teams;\n      this.sortAndSend();\n    });\n  }\n  getTeam(id) {\n    for (let team of this.teams) {\n      if (team.id == id) {\n        return team;\n      }\n    }\n    return null;\n  }\n  deleteTeam(team) {\n    if (!team) {\n      return;\n    }\n    const pos = this.teams.findIndex(d => d.id === team.id);\n    if (pos < 0) {\n      return;\n    }\n    this.http.delete('http://localhost:3000/teams/' + team.id).subscribe(response => {\n      this.teams.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  addTeam(newTeam) {\n    if (!newTeam) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/teams', newTeam, {\n      headers: headers\n    }).subscribe(responseData => {\n      this.teams.push(responseData.team);\n      this.sortAndSend();\n    });\n  }\n  updateTeam(originalTeam, newTeam) {\n    if (!originalTeam || !newTeam) {\n      return;\n    }\n    const pos = this.teams.findIndex(d => d.id === originalTeam.id);\n    if (pos < 0) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/teams/' + originalTeam.id, newTeam, {\n      headers: headers\n    }).subscribe(response => {\n      this.teams[pos] = newTeam;\n      this.sortAndSend();\n    });\n  }\n  sortAndSend() {\n    this.teams.sort((a, b) => a.teamName > b.teamName ? 1 : b.teamName > a.teamName ? -1 : 0);\n    this.teamsListChangedEvent.next(this.teams.slice());\n  }\n}\nTeamService.ɵfac = function TeamService_Factory(t) {\n  return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient));\n};\nTeamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TeamService,\n  factory: TeamService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","HttpHeaders","TeamService","constructor","http","getTeams","get","subscribe","responseData","teams","sortAndSend","getTeam","id","team","deleteTeam","pos","findIndex","d","delete","response","splice","addTeam","newTeam","headers","post","push","updateTeam","originalTeam","put","sort","a","b","teamName","teamsListChangedEvent","next","slice","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\wdd-430\\src\\app\\teams\\team.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Team } from './team.model';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TeamService {\r\n  teams: Team[] = [];\r\n  teamsListChangedEvent = new Subject<Team[]>();\r\n  maxTeamId: number;\r\n  teamSelectedEvent = new EventEmitter<Team>();\r\n  teamChangedEvent = new EventEmitter<Team[]>();\r\n  constructor(private http: HttpClient) {\r\n    this.getTeams();\r\n  }\r\n\r\n  getTeams() {\r\n    this.http\r\n      .get<{ message: string; teams: Team[] }>('http://localhost:3000/teams')\r\n      .subscribe((responseData) => {\r\n        this.teams = responseData.teams;\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  getTeam(id: number): Team {\r\n    for (let team of this.teams) {\r\n      if (team.id == id) {\r\n        return team;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  deleteTeam(team: Team) {\r\n    if (!team) {\r\n      return;\r\n    }\r\n\r\n    const pos = this.teams.findIndex((d) => d.id === team.id);\r\n    if (pos < 0) {\r\n      return;\r\n    }\r\n\r\n    this.http\r\n      .delete('http://localhost:3000/teams/' + team.id)\r\n      .subscribe((response: Response) => {\r\n        this.teams.splice(pos, 1);\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  addTeam(newTeam: Team) {\r\n    if (!newTeam) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    this.http\r\n      .post<{ message: string; team: Team }>(\r\n        'http://localhost:3000/teams',\r\n        newTeam,\r\n        { headers: headers }\r\n      )\r\n      .subscribe((responseData) => {\r\n        this.teams.push(responseData.team);\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  updateTeam(originalTeam: Team, newTeam: Team) {\r\n    if (!originalTeam || !newTeam) {\r\n      return;\r\n    }\r\n\r\n    const pos = this.teams.findIndex((d) => d.id === originalTeam.id);\r\n\r\n    if (pos < 0) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    this.http\r\n      .put(\r\n        'http://localhost:3000/teams/' + originalTeam.id,\r\n        newTeam,\r\n        { headers: headers }\r\n      )\r\n      .subscribe((response: Response) => {\r\n        this.teams[pos] = newTeam;\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  sortAndSend() {\r\n    this.teams.sort((a, b) =>\r\n      a.teamName > b.teamName ? 1 : b.teamName > a.teamName ? -1 : 0\r\n    );\r\n    this.teamsListChangedEvent.next(this.teams.slice());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}