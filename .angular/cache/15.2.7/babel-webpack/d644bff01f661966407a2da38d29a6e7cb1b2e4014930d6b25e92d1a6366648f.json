{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.messageChangeEvent = new Subject();\n    this.messages = [];\n  }\n  ggetMessages() {\n    return this.http.get('http://localhost:3000/messages');\n  }\n  getMessage(id) {\n    return this.messages.find(message => message.id === id) || null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let message of this.messages) {\n      let currentId = parseInt(message.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId.toString();\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    // this.maxMessageId = this.getMaxId();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/messages', message, {\n      headers: headers\n    }).subscribe(() => {\n      this.messageChangeEvent.next(this.messages.slice());\n    });\n  }\n  storeMessages() {\n    const messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/messages', messages, {\n      headers: headers\n    }).subscribe(() => {\n      this.messageChangeEvent.next(this.messages.slice());\n    });\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,OAAO,QAAoB,MAAM;;;AAK1C,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB,uBAAkB,GAAG,IAAIH,OAAO,EAAa;IAE7C,aAAQ,GAAc,EAAE;EAKxB;EAEAI,YAAY;IACV,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAA0B,gCAAgC,CAAC;EACjF;EAEAC,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACH,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EACnE;EAEAI,QAAQ;IACN,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIF,OAAO,IAAI,IAAI,CAACF,QAAQ,EAAE;MACjC,IAAIK,SAAS,GAAGC,QAAQ,CAACJ,OAAO,CAACH,EAAE,CAAC;MACpC,IAAIM,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAIrB,OAAOD,KAAK,CAACG,QAAQ,EAAE;EACzB;EAEAC,UAAU,CAACN,OAAgB;IACzB,IAAI,CAACF,QAAQ,CAACS,IAAI,CAACP,OAAO,CAAC;IAC3B;IACA,MAAMQ,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,IAAI,CAACI,IAAI,CACRgB,IAAI,CAAC,gCAAgC,EAAET,OAAO,EAAE;MAAEQ,OAAO,EAAEA;IAAO,CAAE,CAAC,CACrEE,SAAS,CAAC,MAAK;MACd,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACd,QAAQ,CAACe,KAAK,EAAE,CAAC;IACrD,CAAC,CAAC;EAAG;EAEPC,aAAa;IACX,MAAMhB,QAAQ,GAAGiB,IAAI,CAACC,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAAC;IAC9C,MAAMU,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,IAAI,CAACI,IAAI,CACNgB,IAAI,CAAC,gCAAgC,EAAEX,QAAQ,EAAE;MAAEU,OAAO,EAAEA;IAAO,CAAE,CAAC,CACtEE,SAAS,CAAC,MAAK;MACd,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACd,QAAQ,CAACe,KAAK,EAAE,CAAC;IACrD,CAAC,CAAC;EACN;;AAjDWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["HttpHeaders","Subject","MessageService","constructor","http","ggetMessages","get","getMessage","id","messages","find","message","getMaxId","maxId","currentId","parseInt","toString","addMessage","push","headers","post","subscribe","messageChangeEvent","next","slice","storeMessages","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\messages\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Message } from './message.model';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messageChangeEvent = new Subject<Message[]>();\n\n  messages: Message[] = [];\n  maxMessageId: string;\n\n  constructor(private http: HttpClient) {\n    \n  }\n\n  ggetMessages(): Observable<Message[]> {\n    return this.http.get<{ messages: Message[] }>('http://localhost:3000/messages');\n  }\n\n  getMessage(id: string): Message {\n    return this.messages.find((message) => message.id === id) || null;\n  }\n\n  getMaxId(): string {\n    let maxId = 0;\n    for (let message of this.messages) {\n      let currentId = parseInt(message.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n\n    return maxId.toString();\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    // this.maxMessageId = this.getMaxId();\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    this.http\n    .post('http://localhost:3000/messages', message, { headers: headers })\n    .subscribe(() => {\n      this.messageChangeEvent.next(this.messages.slice());\n    });  }\n\n  storeMessages() {\n    const messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .post('http://localhost:3000/messages', messages, { headers: headers })\n      .subscribe(() => {\n        this.messageChangeEvent.next(this.messages.slice());\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}