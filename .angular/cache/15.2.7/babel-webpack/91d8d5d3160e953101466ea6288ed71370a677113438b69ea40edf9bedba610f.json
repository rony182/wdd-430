{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contactSelectedEvent = new EventEmitter();\n    this.contacts = [];\n    this.contacts = MOCKCONTACTS;\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      console.log();\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AAExD,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAKzBC;IAJA,yBAAoB,GAAG,IAAIH,YAAY,EAAW;IAE1C,aAAQ,GAAc,EAAE;IAG9B,IAAI,CAACI,QAAQ,GAAGH,YAAY;EAC9B;EACAI,WAAW;IACT,OAAO,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;EAC9B;EACAC,UAAU,CAACC,EAAU;IAEnB,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACL,QAAQ,EAAE;MACjCM,OAAO,CAACC,GAAG,EAAE;MAEb,IAAIF,OAAO,CAACD,EAAE,KAAKA,EAAE,EAAE;QACrB,OAAOC,OAAO;;;IAGlB,OAAO,IAAI;EACb;;AArBWP,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAU,SAAdV,cAAc;EAAAW,YAFb;AAAM","names":["EventEmitter","MOCKCONTACTS","ContactService","constructor","contacts","getContacts","slice","getContact","id","contact","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  contactSelectedEvent = new EventEmitter<Contact>();\n\n  private contacts: Contact[] = [];\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n  }\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n  getContact(id: number): Contact {\n    \n    for (let contact of this.contacts) {\n      console.log();\n      \n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}