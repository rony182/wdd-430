{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(http) {\n    this.http = http;\n    this.documentListChangedEvent = new Subject();\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documents = [];\n    this.http.get('https://cms-project-1ccee-default-rtdb.firebaseio.com/documents.json').subscribe(documents => {\n      this.documents = documents;\n      this.maxDocumentId = this.getMaxId();\n      this.documents.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n      this.documentListChangedEvent.next(this.documents.slice());\n    }, error => {\n      console.log(error);\n    });\n    //error handling\n  }\n\n  getDocuments() {\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    return this.documents.find(document => document.id === id) || null;\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let document of this.documents) {\n      let currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId.toString();\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    let currentmaxId = parseInt(this.maxDocumentId);\n    currentmaxId++;\n    newDocument.id = currentmaxId.toString();\n    this.documents.push(newDocument);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","DocumentService","constructor","http","get","subscribe","documents","maxDocumentId","getMaxId","sort","a","b","name","documentListChangedEvent","next","slice","error","console","log","getDocuments","getDocument","id","find","document","deleteDocument","pos","indexOf","splice","maxId","currentId","parseInt","toString","addDocument","newDocument","currentmaxId","push","updateDocument","originalDocument","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Document } from './document.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  maxDocumentId: string;\n  documentListChangedEvent = new Subject<Document[]>();\n\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document[]>();\n\n  private documents: Document[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http\n      .get<Document[]>(\n        'https://cms-project-1ccee-default-rtdb.firebaseio.com/documents.json'\n      )\n      .subscribe((documents: Document[]) => {\n        this.documents = documents;\n        this.maxDocumentId = this.getMaxId();\n        this.documents.sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0));\n        this.documentListChangedEvent.next(this.documents.slice());\n      },\n      (error: any) => {\n        console.log(error);\n      }\n      );\n      //error handling\n      \n  }\n  getDocuments(): Document[] {\n    return this.documents.slice();\n  }\n  getDocument(id: string): Document {\n    return this.documents.find((document) => document.id === id) || null;\n  }\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  getMaxId(): string {\n    let maxId = 0;\n    for (let document of this.documents) {\n      let currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId.toString();\n  }\n  addDocument(newDocument: Document) {\n    if (!newDocument) {\n      return;\n    }\n    let currentmaxId = parseInt(this.maxDocumentId);\n    currentmaxId++;\n    newDocument.id = currentmaxId.toString();\n    this.documents.push(newDocument);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}