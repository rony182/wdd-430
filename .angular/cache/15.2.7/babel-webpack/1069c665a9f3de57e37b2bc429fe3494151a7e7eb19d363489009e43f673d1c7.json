{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.messageChangeEvent = new Subject();\n    this.messages = [];\n    this.http.get('https://cms-project-1ccee-default-rtdb.firebaseio.com/messages.json').subscribe(messages => {\n      this.messages = messages;\n      this.maxMessageId = this.getMaxId();\n      this.messages.sort((a, b) => a.id > b.id ? 1 : b.id > a.id ? -1 : 0);\n      this.messageChangeEvent.next(this.messages.slice());\n    });\n  }\n  getMessages() {\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    return this.messages.find(message => message.id === id) || null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let message of this.messages) {\n      if (message.id > maxId) {\n        maxId = message.id;\n      }\n    }\n    return maxId;\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    this.messageChangeEvent.next(this.messages.slice());\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,cAAc;EAMzBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANd,uBAAkB,GAAG,IAAIH,OAAO,EAAa;IAE7C,aAAQ,GAAc,EAAE;IAMtB,IAAI,CAACG,IAAI,CACNC,GAAG,CACF,qEAAqE,CACtE,CACAC,SAAS,CACPC,QAAmB,IAAI;MACtB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;MACnC,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACtBD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAG,CAAC,GAAGD,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CACvC;MACD,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;IACrD,CAAC,CACF;EAEL;EACAC,WAAW;IACT,OAAO,IAAI,CAACV,QAAQ,CAACS,KAAK,EAAE;EAC9B;EAEAE,UAAU,CAACL,EAAU;IACnB,OAAO,IAAI,CAACN,QAAQ,CAACY,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACP,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EACnE;EAEAJ,QAAQ;IACN,IAAIY,KAAK,GAAG,CAAC;IACb,KAAK,IAAID,OAAO,IAAI,IAAI,CAACb,QAAQ,EAAE;MACjC,IAAIa,OAAO,CAACP,EAAE,GAAGQ,KAAK,EAAE;QACtBA,KAAK,GAAGD,OAAO,CAACP,EAAE;;;IAGtB,OAAOQ,KAAK;EACd;EAEAC,UAAU,CAACF,OAAgB;IACzB,IAAI,CAACb,QAAQ,CAACgB,IAAI,CAACH,OAAO,CAAC;IAC3B,IAAI,CAACN,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;EACrD;;AA9CWd,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["Subject","MessageService","constructor","http","get","subscribe","messages","maxMessageId","getMaxId","sort","a","b","id","messageChangeEvent","next","slice","getMessages","getMessage","find","message","maxId","addMessage","push","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\messages\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Message } from './message.model';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messageChangeEvent = new Subject<Message[]>();\n\n  messages: Message[] = [];\n  maxMessageId: number;\n\n  constructor(\n    private http: HttpClient\n  ) {\n    this.http\n      .get<Message[]>(\n        'https://cms-project-1ccee-default-rtdb.firebaseio.com/messages.json'\n      )\n      .subscribe(\n        (messages: Message[]) => {\n          this.messages = messages;\n          this.maxMessageId = this.getMaxId();\n          this.messages.sort((a, b) =>\n            a.id > b.id ? 1 : b.id > a.id ? -1 : 0\n          );\n          this.messageChangeEvent.next(this.messages.slice());\n        }\n      );\n\n  }\n  getMessages(): Message[] {\n    return this.messages.slice();\n  }\n\n  getMessage(id: number): Message {\n    return this.messages.find((message) => message.id === id) || null;\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (let message of this.messages) {\n      if (message.id > maxId) {\n        maxId = message.id;\n      }\n    }\n    return maxId;\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.messageChangeEvent.next(this.messages.slice());\n  }\n\n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}