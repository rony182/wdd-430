{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Game } from '../game.model';\nlet GameEditComponent = class GameEditComponent {\n  constructor(gameService, teamService,\n  // Inject the Team service\n  route, router) {\n    this.gameService = gameService;\n    this.teamService = teamService;\n    this.route = route;\n    this.router = router;\n    this.game = null;\n    this.editMode = false;\n    // Subscribe to the teamsListChangedEvent\n    this.teamService.teamListChangedEvent.subscribe(teams => {\n      this.teams = teams;\n      this.teamMap = this.createTeamMap(teams);\n      console.log(this.teamMap);\n    });\n  }\n  ngOnInit() {\n    this.teamService.teamListChangedEvent.subscribe(teams => {\n      this.teams = teams;\n      this.initializeGame();\n    });\n    this.teamService.getTeams(); // Move getTeams() call here\n    this.route.params.subscribe(params => {\n      let id = params['id'];\n      if (id === undefined || id === null) {\n        this.editMode = false;\n        return; // Remove the teamService.getTeams() call from here\n      }\n\n      this.gameService.gameListChangedEvent.subscribe(games => {\n        this.originalGame = this.gameService.getGame(id);\n        if (this.originalGame === undefined || this.originalGame === null) {\n          return;\n        }\n        this.editMode = true;\n        this.game = JSON.parse(JSON.stringify(this.originalGame));\n        this.initializeGame(); // Call initializeGame() after assigning this.game\n      });\n\n      this.gameService.getGames();\n    });\n  }\n  initializeGame() {\n    if (this.teams.length > 0 && this.game) {\n      this.game.homeTeam = this.teams.find(team => team.id === this.game.homeTeam?.id);\n      this.game.awayTeam = this.teams.find(team => team.id === this.game.awayTeam?.id);\n      this.game.recap = this.game.recap || ''; // Initialize recap with an empty string if it is null\n    } else {\n      this.game = {\n        id: null,\n        gameDate: null,\n        time: null,\n        homeTeam: null,\n        awayTeam: null,\n        location: null,\n        attendance: null,\n        finalScore: null,\n        recap: ''\n      };\n    }\n  }\n  onSubmit(form) {\n    let values = form.value;\n    console.log(values);\n    // Extract the id values from game.homeTeam and game.awayTeam objects\n    console.log(values.homeTeam);\n    let homeTeamId = values.homeTeam?.homeTeam;\n    let awayTeamId = values.awayTeam?.awayTeam;\n    // Retrieve the corresponding team objects based on the IDs\n    let homeTeam = this.teamMap[homeTeamId];\n    let awayTeam = this.teamMap[awayTeamId];\n    let newGame = new Game(null, values.gameDate, values.time, homeTeam, awayTeam, values.location, values.attendance, values.finalScore, values.recap);\n    if (this.editMode === true) {\n      this.gameService.updateGame(this.originalGame, newGame);\n    } else {\n      this.gameService.addGame(newGame);\n    }\n    this.router.navigate(['/games']);\n  }\n  onCancel() {\n    this.router.navigate(['/games']);\n  }\n  getHomeTeamId() {\n    return this.game?.homeTeam?.id;\n  }\n  setHomeTeamId(id) {\n    this.game.homeTeam = this.teams.find(team => team.id === id);\n  }\n  getAwayTeamId() {\n    return this.game?.awayTeam?.id;\n  }\n  setAwayTeamId(id) {\n    this.game.awayTeam = this.teams.find(team => team.id === id);\n  }\n  createTeamMap(teams) {\n    let teamMap = {};\n    for (let team of teams) {\n      teamMap[team.id] = team;\n    }\n    return teamMap;\n  }\n};\nGameEditComponent = __decorate([Component({\n  selector: 'wdd430-game-edit',\n  templateUrl: './game-edit.component.html',\n  styleUrls: ['./game-edit.component.css']\n})], GameEditComponent);\nexport { GameEditComponent };","map":{"version":3,"mappings":"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","names":["Component","Game","GameEditComponent","constructor","gameService","teamService","route","router","teamListChangedEvent","subscribe","teams","teamMap","createTeamMap","console","log","ngOnInit","initializeGame","getTeams","params","id","undefined","editMode","gameListChangedEvent","games","originalGame","getGame","game","JSON","parse","stringify","getGames","length","homeTeam","find","team","awayTeam","recap","gameDate","time","location","attendance","finalScore","onSubmit","form","values","value","homeTeamId","awayTeamId","newGame","updateGame","addGame","navigate","onCancel","getHomeTeamId","setHomeTeamId","getAwayTeamId","setAwayTeamId","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\laragon\\www\\wdd-430\\src\\app\\games\\game-edit\\game-edit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Game } from '../game.model';\nimport { GameService } from '../game.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { Team } from '../../teams/team.model';\nimport { TeamService } from '../../teams/team.service';\n\n@Component({\n  selector: 'wdd430-game-edit',\n  templateUrl: './game-edit.component.html',\n  styleUrls: ['./game-edit.component.css'],\n})\nexport class GameEditComponent implements OnInit {\n  originalGame: Game;\n  game: Game = null;\n  editMode: boolean = false;\n  teams: Team[]; // Variable to store the teams\n\n  teamMap: { [id: number]: Team }; // Map to store teams by ID\n\n  homeTeam: number; // Update the type to number\n  awayTeam: number; // Update the type to number\n\n  constructor(\n    private gameService: GameService,\n    private teamService: TeamService, // Inject the Team service\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    // Subscribe to the teamsListChangedEvent\n    this.teamService.teamListChangedEvent.subscribe((teams: Team[]) => {\n      this.teams = teams;\n      this.teamMap = this.createTeamMap(teams);\n      console.log(this.teamMap);\n    });\n  }\n\n  ngOnInit() {\n    this.teamService.teamListChangedEvent.subscribe((teams: Team[]) => {\n      this.teams = teams;\n      this.initializeGame();\n    });\n\n    this.teamService.getTeams(); // Move getTeams() call here\n\n    this.route.params.subscribe((params) => {\n      let id = params['id'];\n      if (id === undefined || id === null) {\n        this.editMode = false;\n        return; // Remove the teamService.getTeams() call from here\n      }\n\n      this.gameService.gameListChangedEvent.subscribe((games: Game[]) => {\n        this.originalGame = this.gameService.getGame(id);\n        if (this.originalGame === undefined || this.originalGame === null) {\n          return;\n        }\n        this.editMode = true;\n        this.game = JSON.parse(JSON.stringify(this.originalGame));\n        this.initializeGame(); // Call initializeGame() after assigning this.game\n      });\n\n      this.gameService.getGames();\n    });\n  }\n\n  initializeGame() {\n    if (this.teams.length > 0 && this.game) {\n      this.game.homeTeam = this.teams.find(\n        (team) => team.id === this.game.homeTeam?.id\n      );\n      this.game.awayTeam = this.teams.find(\n        (team) => team.id === this.game.awayTeam?.id\n      );\n      this.game.recap = this.game.recap || ''; // Initialize recap with an empty string if it is null\n    } else {\n      this.game = {\n        id: null,\n        gameDate: null,\n        time: null,\n        homeTeam: null,\n        awayTeam: null,\n        location: null,\n        attendance: null,\n        finalScore: null,\n        recap: '',\n      };\n    }\n  }\n\n  onSubmit(form: NgForm) {\n    let values = form.value;\n    console.log(values);\n  \n    // Extract the id values from game.homeTeam and game.awayTeam objects\n    console.log(values.homeTeam);\n    \n    let homeTeamId = values.homeTeam?.homeTeam;\n  \n    let awayTeamId = values.awayTeam?.awayTeam;\n  \n    // Retrieve the corresponding team objects based on the IDs\n    let homeTeam = this.teamMap[homeTeamId];\n    \n    let awayTeam = this.teamMap[awayTeamId];\n  \n    let newGame = new Game(\n      null,\n      values.gameDate,\n      values.time,\n      homeTeam,\n      awayTeam,\n      values.location,\n      values.attendance,\n      values.finalScore,\n      values.recap\n    );\n  \n    if (this.editMode === true) {\n      this.gameService.updateGame(this.originalGame, newGame);\n    } else {\n      this.gameService.addGame(newGame);\n    }\n  \n    this.router.navigate(['/games']);\n  }\n  \n\n  onCancel() {\n    this.router.navigate(['/games']);\n  }\n\n  getHomeTeamId() {\n    return this.game?.homeTeam?.id;\n  }\n\n  setHomeTeamId(id: number) {\n    this.game.homeTeam = this.teams.find((team) => team.id === id);\n  }\n\n  getAwayTeamId() {\n    return this.game?.awayTeam?.id;\n  }\n\n  setAwayTeamId(id: number) {\n    this.game.awayTeam = this.teams.find((team) => team.id === id);\n  }\n\n  createTeamMap(teams: Team[]): { [id: number]: Team } {\n    let teamMap: { [id: number]: Team } = {};\n    for (let team of teams) {\n      teamMap[team.id] = team;\n    }\n    return teamMap;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}