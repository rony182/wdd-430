{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contactListChangedEvent = new Subject();\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = [];\n    this.http;\n    this.maxContactId = this.getMaxId();\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  deleteContact(contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id.toString());\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = this.maxContactId;\n    this.contacts.push(newContact);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,YAAY,QAAQ,eAAe;AAGxD,SAASC,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,cAAc;EASzBC;IAPA,4BAAuB,GAAG,IAAIF,OAAO,EAAa;IAElD,yBAAoB,GAAG,IAAID,YAAY,EAAW;IAClD,wBAAmB,GAAG,IAAIA,YAAY,EAAa;IAE3C,aAAQ,GAAc,EAAE;IAG9B,IAAI,CAACI,IAAI;IACT,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;EACrC;EACAC,WAAW;IACT,OAAO,IAAI,CAACC,QAAQ,CAACC,KAAK,EAAE;EAC9B;EACAC,UAAU,CAACC,EAAU;IACnB,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjC,IAAII,OAAO,CAACD,EAAE,KAAKA,EAAE,EAAE;QACrB,OAAOC,OAAO;;;IAGlB,OAAO,IAAI;EACb;EACAC,aAAa,CAACD,OAAgB;IAC5B,IAAIA,OAAO,KAAK,IAAI,EAAE;MACpB;;IAEF,MAAME,GAAG,GAAG,IAAI,CAACN,QAAQ,CAACO,OAAO,CAACH,OAAO,CAAC;IAC1C,IAAIE,GAAG,GAAG,CAAC,EAAE;MACX;;IAEF,IAAI,CAACN,QAAQ,CAACQ,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC5B,IAAI,CAACG,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACC,KAAK,EAAE,CAAC;EAC1D;EACAH,QAAQ;IACN,IAAIa,KAAK,GAAG,CAAC;IACb,KAAK,IAAIP,OAAO,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjC,IAAIY,SAAS,GAAGC,QAAQ,CAACT,OAAO,CAACD,EAAE,CAACW,QAAQ,EAAE,CAAC;MAC/C,IAAIF,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;EACAI,UAAU,CAACC,UAAmB;IAC5B,IAAI,CAACA,UAAU,EAAE;MACf;;IAEF,IAAI,CAACnB,YAAY,EAAE;IACnBmB,UAAU,CAACb,EAAE,GAAG,IAAI,CAACN,YAAY;IACjC,IAAI,CAACG,QAAQ,CAACiB,IAAI,CAACD,UAAU,CAAC;IAC9B,IAAI,CAACP,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACC,KAAK,EAAE,CAAC;EAC1D;EACAiB,aAAa,CAACC,eAAwB,EAAEH,UAAmB;IACzD,IAAI,CAACG,eAAe,IAAI,CAACH,UAAU,EAAE;MACnC;;IAEF,MAAMV,GAAG,GAAG,IAAI,CAACN,QAAQ,CAACO,OAAO,CAACY,eAAe,CAAC;IAClD,IAAIb,GAAG,GAAG,CAAC,EAAE;MACX;;IAEFU,UAAU,CAACb,EAAE,GAAGgB,eAAe,CAAChB,EAAE;IAClC,IAAI,CAACH,QAAQ,CAACM,GAAG,CAAC,GAAGU,UAAU;IAC/B,IAAI,CAACP,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACC,KAAK,EAAE,CAAC;EAC1D;;AAjEWP,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["EventEmitter","Subject","ContactService","constructor","http","maxContactId","getMaxId","getContacts","contacts","slice","getContact","id","contact","deleteContact","pos","indexOf","splice","contactListChangedEvent","next","maxId","currentId","parseInt","toString","addContact","newContact","push","updateContact","originalContact","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  maxContactId: number;\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  private contacts: Contact[] = [];\n\n  constructor() {\n    this.http\n    this.maxContactId = this.getMaxId();\n  }\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n  getContact(id: number): Contact {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  deleteContact(contact: Contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  getMaxId(): number {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id.toString());\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact: Contact) {\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = this.maxContactId;\n    this.contacts.push(newContact);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}