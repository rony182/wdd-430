{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactListChangedEvent = new Subject();\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = [];\n    this.http.get('https://cms-project-1ccee-default-rtdb.firebaseio.com/contacts.json').subscribe(contacts => {\n      this.contacts = contacts;\n      this.maxContactId = this.getMaxId();\n      this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n      this.contactListChangedEvent.next(this.contacts.slice());\n    }, error => {\n      console.log(error);\n    });\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  deleteContact(contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.storeContacts();\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id.toString());\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (!newContact) {\n      return;\n    }\n    let currentId = parseInt(newContact.id);\n    currentId++;\n    newContact.id = currentId.toString();\n    this.contacts.push(newContact);\n    this.storeContacts();\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    this.storeContacts();\n  }\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('https://cms-project-1ccee-default-rtdb.firebaseio.com/contacts.json', contacts, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","ContactService","constructor","http","get","subscribe","contacts","maxContactId","getMaxId","sort","a","b","name","contactListChangedEvent","next","slice","error","console","log","getContacts","getContact","id","contact","deleteContact","pos","indexOf","splice","storeContacts","maxId","currentId","parseInt","toString","addContact","newContact","push","updateContact","originalContact","JSON","stringify","headers","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  maxContactId: number;\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http\n      .get<Contact[]>(\n        'https://cms-project-1ccee-default-rtdb.firebaseio.com/contacts.json'\n      )\n      .subscribe(\n        (contacts: Contact[]) => {\n          this.contacts = contacts;\n          this.maxContactId = this.getMaxId();\n          this.contacts.sort((a, b) =>\n            a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n          );\n          this.contactListChangedEvent.next(this.contacts.slice());\n        },\n        (error: any) => {\n          console.log(error);\n        }\n      );\n  }\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n  getContact(id: string): Contact {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  deleteContact(contact: Contact) {\n    if (contact === null) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.storeContacts();\n  }\n  getMaxId(): number {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id.toString());\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  \n  addContact(newContact: Contact) {\n    if (!newContact) {\n      return;\n    }\n    let currentId = parseInt(newContact.id);\n    currentId++;\n    newContact.id = currentId.toString();\n    this.contacts.push(newContact);\n    this.storeContacts();\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    this.storeContacts();\n  }\n\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .put(\n        'https://cms-project-1ccee-default-rtdb.firebaseio.com/contacts.json',\n        contacts,\n        { headers: headers }\n      )\n      .subscribe(() => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}