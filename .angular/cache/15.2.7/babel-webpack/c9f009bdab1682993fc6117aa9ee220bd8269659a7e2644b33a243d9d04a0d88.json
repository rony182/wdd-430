{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlayerService {\n  constructor(http) {\n    this.http = http;\n    this.playerListChangedEvent = new Subject();\n    this.players = [];\n    this.playerSelectedEvent = new EventEmitter();\n    this.playerChangedEvent = new EventEmitter();\n    this.getPlayers();\n  }\n  getPlayers() {\n    this.http.get('http://localhost:3000/players').subscribe(responseData => {\n      this.players = responseData.players;\n      this.sortAndSend();\n    });\n  }\n  getPlayer(id) {\n    for (let player of this.players) {\n      if (player.id == id) {\n        return player;\n      }\n    }\n    return null;\n  }\n  deletePlayer(player) {\n    if (!player) {\n      return;\n    }\n    const pos = this.players.findIndex(d => d.id === player.id);\n    if (pos < 0) {\n      return;\n    }\n    this.http.delete('http://localhost:3000/players/' + player.id).subscribe(response => {\n      this.players.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  addPlayer(newPlayer) {\n    if (!newPlayer) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/players', newPlayer, {\n      headers: headers\n    }).subscribe(responseData => {\n      this.players.push(responseData.player);\n      this.sortAndSend();\n    });\n  }\n  updatePlayer(originalPlayer, newPlayer) {\n    if (!originalPlayer || !newPlayer) {\n      return;\n    }\n    const pos = this.players.findIndex(d => d.id === originalPlayer.id);\n    if (pos < 0) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/players/' + originalPlayer.id, newPlayer, {\n      headers: headers\n    }).subscribe(response => {\n      this.players[pos] = newPlayer;\n      this.sortAndSend();\n    });\n  }\n  sortAndSend() {\n    this.players.sort((a, b) => a.playerName > b.playerName ? 1 : b.playerName > a.playerName ? 1 : -1);\n    this.playerListChangedEvent.next(this.players.slice());\n  }\n}\nPlayerService.ɵfac = function PlayerService_Factory(t) {\n  return new (t || PlayerService)(i0.ɵɵinject(i1.HttpClient));\n};\nPlayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlayerService,\n  factory: PlayerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","HttpHeaders","PlayerService","constructor","http","getPlayers","get","subscribe","responseData","players","sortAndSend","getPlayer","id","player","deletePlayer","pos","findIndex","d","delete","response","splice","addPlayer","newPlayer","headers","post","push","updatePlayer","originalPlayer","put","sort","a","b","playerName","playerListChangedEvent","next","slice","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\wdd-430\\src\\app\\players\\player.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Player } from './player.model';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PlayerService {\r\n  playerListChangedEvent = new Subject<Player[]>();\r\n  players: Player[] = [];\r\n  maxPlayerId: number;\r\n  playerSelectedEvent = new EventEmitter<Player>();\r\n  playerChangedEvent = new EventEmitter<Player[]>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.getPlayers();\r\n  }\r\n\r\n  getPlayers() {\r\n    this.http\r\n      .get<{ message: string; players: Player[] }>(\r\n        'http://localhost:3000/players'\r\n      )\r\n      .subscribe((responseData) => {\r\n        this.players = responseData.players;\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  getPlayer(id: number): Player {\r\n    for (let player of this.players) {      \r\n      if (player.id == id) {\r\n        return player;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  deletePlayer(player: Player) {\r\n    if (!player) {\r\n      return;\r\n    }\r\n\r\n    const pos = this.players.findIndex((d) => d.id === player.id);\r\n    if (pos < 0) {\r\n      return;\r\n    }\r\n\r\n    this.http\r\n      .delete('http://localhost:3000/players/' + player.id)\r\n      .subscribe((response: Response) => {\r\n        this.players.splice(pos, 1);\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  addPlayer(newPlayer: Player) {\r\n    if (!newPlayer) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    this.http\r\n      .post<{ message: string; player: Player }>(\r\n        'http://localhost:3000/players',\r\n        newPlayer,\r\n        { headers: headers }\r\n      )\r\n      .subscribe((responseData) => {\r\n        this.players.push(responseData.player);\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  updatePlayer(originalPlayer: Player, newPlayer: Player) {\r\n    if (!originalPlayer || !newPlayer) {\r\n      return;\r\n    }\r\n\r\n    const pos = this.players.findIndex((d) => d.id === originalPlayer.id);\r\n    if (pos < 0) {\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    this.http\r\n      .put('http://localhost:3000/players/' + originalPlayer.id, newPlayer, {\r\n        headers: headers,\r\n      })\r\n      .subscribe((response: Response) => {\r\n        this.players[pos] = newPlayer;\r\n        this.sortAndSend();\r\n      });\r\n  }\r\n\r\n  sortAndSend() {\r\n    this.players.sort((a, b) =>\r\n      a.playerName > b.playerName ? 1 : b.playerName > a.playerName ? 1 : -1\r\n    );\r\n    this.playerListChangedEvent.next(this.players.slice());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}