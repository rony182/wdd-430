{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(http) {\n    this.http = http;\n    this.documentListChangedEvent = new Subject();\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documents = [];\n    this.http.get('http://localhost:3000/documents').subscribe(response => {\n      this.documents = response.documents;\n      this.maxDocumentId = this.getMaxId();\n      this.sortAndSend();\n    }, error => {\n      console.log(error);\n    });\n  }\n  getDocuments() {\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    return this.documents.find(document => document.id === id) || null;\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.http.delete('http://localhost:3000/documents/' + document.id).subscribe(response => {\n      this.documents.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxId() {\n    let maxId = 0;\n    if (Array.isArray(this.documents)) {\n      for (let document of this.documents) {\n        let currentId = parseInt(document.id);\n        if (currentId > maxId) {\n          maxId = currentId;\n        }\n      }\n    }\n    return maxId.toString();\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post('http://localhost:3000/documents', newDocument, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.documents.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/documents/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(response => {\n      this.documents[pos] = newDocument;\n      this.sortAndSend();\n    });\n  }\n  storeDocuments() {\n    let documents = JSON.stringify(this.documents);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/documents', documents, {\n      headers: headers\n    }).subscribe(() => {\n      this.documentListChangedEvent.next(this.documents.slice());\n    });\n  }\n  sortAndSend() {\n    if (Array.isArray(this.documents)) {\n      this.documents.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n      this.documentListChangedEvent.next(this.documents.slice());\n    }\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","DocumentService","constructor","http","get","subscribe","response","documents","maxDocumentId","getMaxId","sortAndSend","error","console","log","getDocuments","slice","getDocument","id","find","document","deleteDocument","pos","indexOf","delete","splice","maxId","Array","isArray","currentId","parseInt","toString","addDocument","newDocument","headers","post","responseData","push","updateDocument","originalDocument","put","storeDocuments","JSON","stringify","documentListChangedEvent","next","sort","a","b","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Document } from './document.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  maxDocumentId: string;\n  documentListChangedEvent = new Subject<Document[]>();\n\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document[]>();\n\n  documents: Document[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http.get<{ documents: Document[] }>('http://localhost:3000/documents').subscribe(\n      (response) => {\n        this.documents = response.documents;\n        this.maxDocumentId = this.getMaxId();\n        this.sortAndSend();\n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n  }\n  \n  \n  \n\n  getDocuments(): Document[] {\n    return this.documents.slice();\n  }\n\n  getDocument(id: string): Document {\n    return this.documents.find((document) => document.id === id) || null;\n  }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.http\n      .delete('http://localhost:3000/documents/' + document.id)\n      .subscribe((response: Response) => {\n        this.documents.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n\n  getMaxId(): string {\n    let maxId = 0;\n    if (Array.isArray(this.documents)) {\n      for (let document of this.documents) {\n        let currentId = parseInt(document.id);\n        if (currentId > maxId) {\n          maxId = currentId;\n        }\n      }\n    }\n    return maxId.toString();\n  }\n\n  addDocument(newDocument: Document) {\n    if (!newDocument) {\n      return;\n    }\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .post<{ message: string; document: Document }>(\n        'http://localhost:3000/documents',\n        newDocument,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new document to documents\n        this.documents.push(responseData.document);\n        this.sortAndSend();\n      });\n  }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .put(\n        'http://localhost:3000/documents/' + originalDocument.id,\n        newDocument,\n        { headers: headers }\n      )\n      .subscribe((response: Response) => {\n        this.documents[pos] = newDocument;\n        this.sortAndSend();\n      });\n  }\n\n  storeDocuments() {\n    let documents = JSON.stringify(this.documents);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .put('http://localhost:3000/documents', documents, { headers: headers })\n      .subscribe(() => {\n        this.documentListChangedEvent.next(this.documents.slice());\n      });\n  }\n\n  sortAndSend() {\n    if (Array.isArray(this.documents)) {\n      this.documents.sort((a, b) =>\n        a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n      );\n      this.documentListChangedEvent.next(this.documents.slice());\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}