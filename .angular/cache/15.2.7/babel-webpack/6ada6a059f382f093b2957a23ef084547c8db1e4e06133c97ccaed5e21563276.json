{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.messageChangeEvent = new EventEmitter();\n    this.messages = [];\n    this.http.get();\n  }\n  getMessages() {\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    for (let message of this.messages) {\n      if (message.id === id) {\n        return message;\n      }\n    }\n    return null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let message of this.messages) {\n      if (message.id > maxId) {\n        maxId = message.id;\n      }\n    }\n    return maxId;\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    this.messageChangeEvent.emit(this.messages.slice());\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,YAAY,QAAQ,eAAe;;;AAOxD,OAAM,MAAOC,cAAc;EAMzBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANd,uBAAkB,GAAG,IAAIH,YAAY,EAAa;IAElD,aAAQ,GAAc,EAAE;IAMtB,IAAI,CAACG,IAAI,CACNC,GAAG,EAAY;EAEpB;EACAC,WAAW;IACT,OAAO,IAAI,CAACC,QAAQ,CAACC,KAAK,EAAE;EAC9B;EAEAC,UAAU,CAACC,EAAU;IACnB,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjC,IAAII,OAAO,CAACD,EAAE,KAAKA,EAAE,EAAE;QACrB,OAAOC,OAAO;;;IAGlB,OAAO,IAAI;EACb;EAEAC,QAAQ;IACN,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIF,OAAO,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjC,IAAII,OAAO,CAACD,EAAE,GAAGG,KAAK,EAAE;QACtBA,KAAK,GAAGF,OAAO,CAACD,EAAE;;;IAGtB,OAAOG,KAAK;EACd;EAEAC,UAAU,CAACH,OAAgB;IACzB,IAAI,CAACJ,QAAQ,CAACQ,IAAI,CAACJ,OAAO,CAAC;IAC3B,IAAI,CAACK,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACC,KAAK,EAAE,CAAC;EACrD;;AAvCWN,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAgB,SAAdhB,cAAc;EAAAiB,YAFb;AAAM","names":["EventEmitter","MessageService","constructor","http","get","getMessages","messages","slice","getMessage","id","message","getMaxId","maxId","addMessage","push","messageChangeEvent","emit","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\messages\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Message } from './message.model';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messageChangeEvent = new EventEmitter<Message[]>();\n\n  messages: Message[] = [];\n  maxMessageId: number;\n\n  constructor(\n    private http: HttpClient\n  ) {\n    this.http\n      .get<Message[]>(\n        \n  }\n  getMessages(): Message[] {\n    return this.messages.slice();\n  }\n\n  getMessage(id: number): Message {\n    for (let message of this.messages) {\n      if (message.id === id) {\n        return message;\n      }\n    }\n    return null;\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (let message of this.messages) {\n      if (message.id > maxId) {\n        maxId = message.id;\n      }\n    }\n    return maxId;\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.messageChangeEvent.emit(this.messages.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}