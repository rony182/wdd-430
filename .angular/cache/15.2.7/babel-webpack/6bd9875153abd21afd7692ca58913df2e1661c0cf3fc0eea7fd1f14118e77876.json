{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.messageChangeEvent = new Subject();\n    this.messages = [];\n    this.http.get('http://localhost:3000/messages').subscribe(response => {\n      this.messages = response.messages;\n      this.maxMessageId = this.getMaxId();\n      this.messages.sort((a, b) => a.id > b.id ? 1 : b.id > a.id ? -1 : 0);\n      this.messageChangeEvent.next(this.messages.slice());\n    });\n  }\n  getMessages() {\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    return this.messages.find(message => message.id === id) || null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    return maxId;\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    this.maxMessageId = this.getMaxId();\n    this.storeMessages();\n  }\n  storeMessages() {\n    const messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://localhost:3000/messages', messages, {\n      headers: headers\n    }).subscribe(() => {\n      this.messageChangeEvent.next(this.messages.slice());\n    });\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB,uBAAkB,GAAG,IAAIH,OAAO,EAAa;IAE7C,aAAQ,GAAc,EAAE;IAItB,IAAI,CAACG,IAAI,CACNC,GAAG,CAAwB,gCAAgC,CAAC,CAC5DC,SAAS,CACPC,QAAQ,IAAI;MACb,IAAI,CAACC,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;MACjC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;MACnC,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAG,CAAC,GAAGD,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAE,CAAC;MACtE,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;IACrD,CAAC,CAAC;EACN;EACAC,WAAW;IACT,OAAO,IAAI,CAACV,QAAQ,CAACS,KAAK,EAAE;EAC9B;EAEAE,UAAU,CAACL,EAAU;IACnB,OAAO,IAAI,CAACN,QAAQ,CAACY,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACP,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EACnE;EAEAJ,QAAQ;IACN,IAAIY,KAAK,GAAG,CAAC;IAEb,OAAOA,KAAK;EACd;EAEAC,UAAU,CAACF,OAAgB;IACzB,IAAI,CAACb,QAAQ,CAACgB,IAAI,CAACH,OAAO,CAAC;IAC3B,IAAI,CAACZ,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;IACnC,IAAI,CAACe,aAAa,EAAE;EACtB;EAEAA,aAAa;IACX,MAAMjB,QAAQ,GAAGkB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACnB,QAAQ,CAAC;IAC9C,MAAMoB,OAAO,GAAG,IAAI5B,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,IAAI,CAACI,IAAI,CACNyB,GAAG,CAAC,gCAAgC,EAAErB,QAAQ,EAAE;MAAEoB,OAAO,EAAEA;IAAO,CAAE,CAAC,CACrEtB,SAAS,CAAC,MAAK;MACd,IAAI,CAACS,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;IACrD,CAAC,CAAC;EACN;;AA7CWf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;EAAA6B,YAFb;AAAM","names":["HttpHeaders","Subject","MessageService","constructor","http","get","subscribe","response","messages","maxMessageId","getMaxId","sort","a","b","id","messageChangeEvent","next","slice","getMessages","getMessage","find","message","maxId","addMessage","push","storeMessages","JSON","stringify","headers","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\messages\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Message } from './message.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messageChangeEvent = new Subject<Message[]>();\n\n  messages: Message[] = [];\n  maxMessageId: number;\n\n  constructor(private http: HttpClient) {\n    this.http\n      .get<{messages: Message[]}>('http://localhost:3000/messages')\n      .subscribe(\n        (response) => {\n        this.messages = response.messages;\n        this.maxMessageId = this.getMaxId();\n        this.messages.sort((a, b) => (a.id > b.id ? 1 : b.id > a.id ? -1 : 0));\n        this.messageChangeEvent.next(this.messages.slice());\n      });\n  }\n  getMessages(): Message[] {\n    return this.messages.slice();\n  }\n\n  getMessage(id: number): Message {\n    return this.messages.find((message) => message.id === id) || null;\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    \n    return maxId;\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.maxMessageId = this.getMaxId();\n    this.storeMessages();\n  }\n\n  storeMessages() {\n    const messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.http\n      .put('http://localhost:3000/messages', messages, { headers: headers })\n      .subscribe(() => {\n        this.messageChangeEvent.next(this.messages.slice());\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}