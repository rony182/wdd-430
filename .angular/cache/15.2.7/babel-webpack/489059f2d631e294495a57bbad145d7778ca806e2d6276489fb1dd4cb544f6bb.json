{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.documentListChangedEvent = new Subject();\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documents = [];\n    this.documents = MOCKDOCUMENTS;\n  }\n  getDocuments() {\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    for (let document of this.documents) {\n      if (document.id === id) {\n        return document;\n      }\n    }\n    return null;\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentChangedEvent.emit(this.documents.slice());\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let document of this.documents) {\n      let currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AAExD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,eAAe;EAQ1BC;IAPA,6BAAwB,GAAG,IAAIF,OAAO,EAAc;IAEpD,0BAAqB,GAAG,IAAIF,YAAY,EAAY;IACpD,yBAAoB,GAAG,IAAIA,YAAY,EAAc;IAE7C,cAAS,GAAe,EAAE;IAGhC,IAAI,CAACK,SAAS,GAAGJ,aAAa;EAChC;EACAK,YAAY;IACV,OAAO,IAAI,CAACD,SAAS,CAACE,KAAK,EAAE;EAC/B;EACAC,WAAW,CAACC,EAAU;IACpB,KAAK,IAAIC,QAAQ,IAAI,IAAI,CAACL,SAAS,EAAE;MACnC,IAAIK,QAAQ,CAACD,EAAE,KAAKA,EAAE,EAAE;QACtB,OAAOC,QAAQ;;;IAGnB,OAAO,IAAI;EACb;EACAC,cAAc,CAACD,QAAkB;IAC/B,IAAI,CAACA,QAAQ,EAAE;MACb;;IAEF,MAAME,GAAG,GAAG,IAAI,CAACP,SAAS,CAACQ,OAAO,CAACH,QAAQ,CAAC;IAC5C,IAAIE,GAAG,GAAG,CAAC,EAAE;MACX;;IAEF,IAAI,CAACP,SAAS,CAACS,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC7B,IAAI,CAACG,oBAAoB,CAACC,IAAI,CAAC,IAAI,CAACX,SAAS,CAACE,KAAK,EAAE,CAAC;EACxD;EACAU,QAAQ;IACN,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIR,QAAQ,IAAI,IAAI,CAACL,SAAS,EAAE;MACnC,IAAIc,SAAS,GAAGC,QAAQ,CAACV,QAAQ,CAACD,EAAE,CAAC;MACrC,IAAIU,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;;AA1CWf,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAkB,SAAflB,eAAe;EAAAmB,YAFd;AAAM","names":["EventEmitter","MOCKDOCUMENTS","Subject","DocumentService","constructor","documents","getDocuments","slice","getDocument","id","document","deleteDocument","pos","indexOf","splice","documentChangedEvent","emit","getMaxId","maxId","currentId","parseInt","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\cms_app\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Document } from './document.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  documentListChangedEvent = new Subject<Document[]>();\n\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document[]>();\n\n  private documents: Document[] = [];\n\n  constructor() {\n    this.documents = MOCKDOCUMENTS;\n  }\n  getDocuments(): Document[] {\n    return this.documents.slice();\n  }\n  getDocument(id: string): Document {\n    for (let document of this.documents) {\n      if (document.id === id) {\n        return document;\n      }\n    }\n    return null;\n  }\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentChangedEvent.emit(this.documents.slice());\n  }\n  getMaxId(): number {\n    let maxId = 0;\n    for (let document of this.documents) {\n      let currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}